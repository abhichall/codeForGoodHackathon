import {
  BuildManifest,
  StandardTaskCatalog,
  TracingSDK,
  ZodSchemaParsedError,
  indexerToWorkerMessages,
  normalizeImportPath,
  require_source_map_support,
  s,
  sendMessageInCatalog,
  taskCatalog
} from "../../../../../../../../../../chunk-6NDRYPOI.mjs";
import {
  __toESM,
  init_esm
} from "../../../../../../../../../../chunk-FNJ5RO3Q.mjs";

// ../../../AppData/Local/npm-cache/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/dist/esm/entryPoints/dev-index-worker.js
init_esm();
var import_source_map_support = __toESM(require_source_map_support(), 1);
import { readFile } from "node:fs/promises";

// ../../../AppData/Local/npm-cache/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/dist/esm/indexing/registerTasks.js
init_esm();
async function registerTasks(buildManifest2) {
  const importErrors2 = [];
  for (const file of buildManifest2.files) {
    const [error, module] = await tryImport(file.out);
    if (error) {
      if (typeof error === "string") {
        importErrors2.push({
          file: file.entry,
          message: error
        });
      } else {
        importErrors2.push({
          file: file.entry,
          message: error.message,
          stack: error.stack,
          name: error.name
        });
      }
      continue;
    }
    for (const exportName of getExportNames(module)) {
      const task = module[exportName] ?? module.default?.[exportName];
      if (!task) {
        continue;
      }
      if (task[Symbol.for("trigger.dev/task")]) {
        if (taskCatalog.taskExists(task.id)) {
          taskCatalog.registerTaskFileMetadata(task.id, {
            exportName,
            filePath: file.entry,
            entryPoint: file.out
          });
        }
      }
    }
  }
  return importErrors2;
}
async function tryImport(path) {
  try {
    const module = await import(normalizeImportPath(path));
    return [null, module];
  } catch (error) {
    return [error, null];
  }
}
function getExportNames(module) {
  const exports = [];
  const exportKeys = Object.keys(module);
  if (exportKeys.length === 0) {
    return exports;
  }
  if (exportKeys.length === 1 && exportKeys[0] === "default") {
    return Object.keys(module.default);
  }
  return exportKeys;
}

// ../../../AppData/Local/npm-cache/_npx/f51a09bd0abf5f10/node_modules/trigger.dev/dist/esm/entryPoints/dev-index-worker.js
import_source_map_support.default.install({
  handleUncaughtExceptions: false,
  environment: "node",
  hookRequire: false
});
process.on("uncaughtException", function(error, origin) {
  if (error instanceof Error) {
    process.send && process.send({
      type: "UNCAUGHT_EXCEPTION",
      payload: {
        error: { name: error.name, message: error.message, stack: error.stack },
        origin
      },
      version: "v1"
    });
  } else {
    process.send && process.send({
      type: "UNCAUGHT_EXCEPTION",
      payload: {
        error: {
          name: "Error",
          message: typeof error === "string" ? error : JSON.stringify(error)
        },
        origin
      },
      version: "v1"
    });
  }
});
taskCatalog.setGlobalTaskCatalog(new StandardTaskCatalog());
async function importConfig(configPath) {
  const configModule = await import(normalizeImportPath(configPath));
  const config = configModule?.default ?? configModule?.config;
  return {
    config,
    handleError: configModule?.handleError
  };
}
async function loadBuildManifest() {
  const manifestContents = await readFile(s.TRIGGER_BUILD_MANIFEST_PATH, "utf-8");
  const raw = JSON.parse(manifestContents);
  return BuildManifest.parse(raw);
}
async function bootstrap() {
  const buildManifest2 = await loadBuildManifest();
  const { config } = await importConfig(buildManifest2.configPath);
  const tracingSDK = new TracingSDK({
    url: s.OTEL_EXPORTER_OTLP_ENDPOINT ?? "http://0.0.0.0:4318",
    instrumentations: config.instrumentations ?? [],
    diagLogLevel: s.OTEL_LOG_LEVEL ?? "none",
    forceFlushTimeoutMillis: 3e4
  });
  const importErrors2 = await registerTasks(buildManifest2);
  return {
    tracingSDK,
    config,
    buildManifest: buildManifest2,
    importErrors: importErrors2
  };
}
var { buildManifest, importErrors } = await bootstrap();
var tasks = taskCatalog.listTaskManifests();
await sendMessageInCatalog(indexerToWorkerMessages, "INDEX_COMPLETE", {
  manifest: {
    tasks,
    configPath: buildManifest.configPath,
    runtime: buildManifest.runtime,
    workerEntryPoint: buildManifest.runWorkerEntryPoint,
    controllerEntryPoint: buildManifest.runControllerEntryPoint,
    loaderEntryPoint: buildManifest.loaderEntryPoint,
    customConditions: buildManifest.customConditions
  },
  importErrors
}, async (msg) => {
  process.send?.(msg);
}).catch((err) => {
  if (err instanceof ZodSchemaParsedError) {
    return sendMessageInCatalog(indexerToWorkerMessages, "TASKS_FAILED_TO_PARSE", { zodIssues: err.error.issues, tasks }, async (msg) => {
      await process.send?.(msg);
    });
  } else {
    console.error("Failed to send TASKS_READY message", err);
  }
  return;
});
await new Promise((resolve) => {
  setTimeout(() => {
    resolve();
  }, 10);
});
//# sourceMappingURL=dev-index-worker.mjs.map
